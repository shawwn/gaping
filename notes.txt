On jax's PRNG design:

https://github.com/google/jax/blob/master/design_notes/prng.md
http://www.thesalmons.org/john/random123/papers/random123sc11.pdf
https://dl.acm.org/doi/10.1145/2503778.2503784
https://scihubtw.tw/10.1145/2503778.2503784


Pytorch resnet18 checkpoint shapes:

>>> r18 = torch.load('resnet18-5c106cde.pth')
>>> pp([(v.shape, k) for k, v in r18.items()])
[(torch.Size([64, 3, 7, 7]), 'conv1.weight'),
 (torch.Size([64]), 'bn1.running_mean'),
 (torch.Size([64]), 'bn1.running_var'),
 (torch.Size([64]), 'bn1.weight'),
 (torch.Size([64]), 'bn1.bias'),
 (torch.Size([64, 64, 3, 3]), 'layer1.0.conv1.weight'),
 (torch.Size([64]), 'layer1.0.bn1.running_mean'),
 (torch.Size([64]), 'layer1.0.bn1.running_var'),
 (torch.Size([64]), 'layer1.0.bn1.weight'),
 (torch.Size([64]), 'layer1.0.bn1.bias'),
 (torch.Size([64, 64, 3, 3]), 'layer1.0.conv2.weight'),
 (torch.Size([64]), 'layer1.0.bn2.running_mean'),
 (torch.Size([64]), 'layer1.0.bn2.running_var'),
 (torch.Size([64]), 'layer1.0.bn2.weight'),
 (torch.Size([64]), 'layer1.0.bn2.bias'),
 (torch.Size([64, 64, 3, 3]), 'layer1.1.conv1.weight'),
 (torch.Size([64]), 'layer1.1.bn1.running_mean'),
 (torch.Size([64]), 'layer1.1.bn1.running_var'),
 (torch.Size([64]), 'layer1.1.bn1.weight'),
 (torch.Size([64]), 'layer1.1.bn1.bias'),
 (torch.Size([64, 64, 3, 3]), 'layer1.1.conv2.weight'),
 (torch.Size([64]), 'layer1.1.bn2.running_mean'),
 (torch.Size([64]), 'layer1.1.bn2.running_var'),
 (torch.Size([64]), 'layer1.1.bn2.weight'),
 (torch.Size([64]), 'layer1.1.bn2.bias'),
 (torch.Size([128, 64, 3, 3]), 'layer2.0.conv1.weight'),
 (torch.Size([128]), 'layer2.0.bn1.running_mean'),
 (torch.Size([128]), 'layer2.0.bn1.running_var'),
 (torch.Size([128]), 'layer2.0.bn1.weight'),
 (torch.Size([128]), 'layer2.0.bn1.bias'),
 (torch.Size([128, 128, 3, 3]), 'layer2.0.conv2.weight'),
 (torch.Size([128]), 'layer2.0.bn2.running_mean'),
 (torch.Size([128]), 'layer2.0.bn2.running_var'),
 (torch.Size([128]), 'layer2.0.bn2.weight'),
 (torch.Size([128]), 'layer2.0.bn2.bias'),
 (torch.Size([128, 64, 1, 1]), 'layer2.0.downsample.0.weight'),
 (torch.Size([128]), 'layer2.0.downsample.1.running_mean'),
 (torch.Size([128]), 'layer2.0.downsample.1.running_var'),
 (torch.Size([128]), 'layer2.0.downsample.1.weight'),
 (torch.Size([128]), 'layer2.0.downsample.1.bias'),
 (torch.Size([128, 128, 3, 3]), 'layer2.1.conv1.weight'),
 (torch.Size([128]), 'layer2.1.bn1.running_mean'),
 (torch.Size([128]), 'layer2.1.bn1.running_var'),
 (torch.Size([128]), 'layer2.1.bn1.weight'),
 (torch.Size([128]), 'layer2.1.bn1.bias'),
 (torch.Size([128, 128, 3, 3]), 'layer2.1.conv2.weight'),
 (torch.Size([128]), 'layer2.1.bn2.running_mean'),
 (torch.Size([128]), 'layer2.1.bn2.running_var'),
 (torch.Size([128]), 'layer2.1.bn2.weight'),
 (torch.Size([128]), 'layer2.1.bn2.bias'),
 (torch.Size([256, 128, 3, 3]), 'layer3.0.conv1.weight'),
 (torch.Size([256]), 'layer3.0.bn1.running_mean'),
 (torch.Size([256]), 'layer3.0.bn1.running_var'),
 (torch.Size([256]), 'layer3.0.bn1.weight'),
 (torch.Size([256]), 'layer3.0.bn1.bias'),
 (torch.Size([256, 256, 3, 3]), 'layer3.0.conv2.weight'),
 (torch.Size([256]), 'layer3.0.bn2.running_mean'),
 (torch.Size([256]), 'layer3.0.bn2.running_var'),
 (torch.Size([256]), 'layer3.0.bn2.weight'),
 (torch.Size([256]), 'layer3.0.bn2.bias'),
 (torch.Size([256, 128, 1, 1]), 'layer3.0.downsample.0.weight'),
 (torch.Size([256]), 'layer3.0.downsample.1.running_mean'),
 (torch.Size([256]), 'layer3.0.downsample.1.running_var'),
 (torch.Size([256]), 'layer3.0.downsample.1.weight'),
 (torch.Size([256]), 'layer3.0.downsample.1.bias'),
 (torch.Size([256, 256, 3, 3]), 'layer3.1.conv1.weight'),
 (torch.Size([256]), 'layer3.1.bn1.running_mean'),
 (torch.Size([256]), 'layer3.1.bn1.running_var'),
 (torch.Size([256]), 'layer3.1.bn1.weight'),
 (torch.Size([256]), 'layer3.1.bn1.bias'),
 (torch.Size([256, 256, 3, 3]), 'layer3.1.conv2.weight'),
 (torch.Size([256]), 'layer3.1.bn2.running_mean'),
 (torch.Size([256]), 'layer3.1.bn2.running_var'),
 (torch.Size([256]), 'layer3.1.bn2.weight'),
 (torch.Size([256]), 'layer3.1.bn2.bias'),
 (torch.Size([512, 256, 3, 3]), 'layer4.0.conv1.weight'),
 (torch.Size([512]), 'layer4.0.bn1.running_mean'),
 (torch.Size([512]), 'layer4.0.bn1.running_var'),
 (torch.Size([512]), 'layer4.0.bn1.weight'),
 (torch.Size([512]), 'layer4.0.bn1.bias'),
 (torch.Size([512, 512, 3, 3]), 'layer4.0.conv2.weight'),
 (torch.Size([512]), 'layer4.0.bn2.running_mean'),
 (torch.Size([512]), 'layer4.0.bn2.running_var'),
 (torch.Size([512]), 'layer4.0.bn2.weight'),
 (torch.Size([512]), 'layer4.0.bn2.bias'),
 (torch.Size([512, 256, 1, 1]), 'layer4.0.downsample.0.weight'),
 (torch.Size([512]), 'layer4.0.downsample.1.running_mean'),
 (torch.Size([512]), 'layer4.0.downsample.1.running_var'),
 (torch.Size([512]), 'layer4.0.downsample.1.weight'),
 (torch.Size([512]), 'layer4.0.downsample.1.bias'),
 (torch.Size([512, 512, 3, 3]), 'layer4.1.conv1.weight'),
 (torch.Size([512]), 'layer4.1.bn1.running_mean'),
 (torch.Size([512]), 'layer4.1.bn1.running_var'),
 (torch.Size([512]), 'layer4.1.bn1.weight'),
 (torch.Size([512]), 'layer4.1.bn1.bias'),
 (torch.Size([512, 512, 3, 3]), 'layer4.1.conv2.weight'),
 (torch.Size([512]), 'layer4.1.bn2.running_mean'),
 (torch.Size([512]), 'layer4.1.bn2.running_var'),
 (torch.Size([512]), 'layer4.1.bn2.weight'),
 (torch.Size([512]), 'layer4.1.bn2.bias'),
 (torch.Size([1000, 512]), 'fc.weight'),
 (torch.Size([1000]), 'fc.bias')]

tftorch resnet18 model shapes:

>>> pp([(nn.size(v), k) for k, v in list(mdl.named_parameters()) + list(mdl.named_buffers())])
[([7, 7, 3, 64], 'conv1.weight'),
 ([64], 'bn1.weight'),
 ([64], 'bn1.bias'),
 ([3, 3, 64, 64], 'layer1.0.conv1.weight'),
 ([64], 'layer1.0.bn1.weight'),
 ([64], 'layer1.0.bn1.bias'),
 ([3, 3, 64, 64], 'layer1.0.conv2.weight'),
 ([64], 'layer1.0.bn2.weight'),
 ([64], 'layer1.0.bn2.bias'),
 ([3, 3, 64, 64], 'layer1.1.conv1.weight'),
 ([64], 'layer1.1.bn1.weight'),
 ([64], 'layer1.1.bn1.bias'),
 ([3, 3, 64, 64], 'layer1.1.conv2.weight'),
 ([64], 'layer1.1.bn2.weight'),
 ([64], 'layer1.1.bn2.bias'),
 ([3, 3, 64, 128], 'layer2.0.conv1.weight'),
 ([128], 'layer2.0.bn1.weight'),
 ([128], 'layer2.0.bn1.bias'),
 ([3, 3, 128, 128], 'layer2.0.conv2.weight'),
 ([128], 'layer2.0.bn2.weight'),
 ([128], 'layer2.0.bn2.bias'),
 ([1, 1, 64, 128], 'layer2.0.downsample.0.weight'),
 ([128], 'layer2.0.downsample.1.weight'),
 ([128], 'layer2.0.downsample.1.bias'),
 ([3, 3, 128, 128], 'layer2.1.conv1.weight'),
 ([128], 'layer2.1.bn1.weight'),
 ([128], 'layer2.1.bn1.bias'),
 ([3, 3, 128, 128], 'layer2.1.conv2.weight'),
 ([128], 'layer2.1.bn2.weight'),
 ([128], 'layer2.1.bn2.bias'),
 ([3, 3, 128, 256], 'layer3.0.conv1.weight'),
 ([256], 'layer3.0.bn1.weight'),
 ([256], 'layer3.0.bn1.bias'),
 ([3, 3, 256, 256], 'layer3.0.conv2.weight'),
 ([256], 'layer3.0.bn2.weight'),
 ([256], 'layer3.0.bn2.bias'),
 ([1, 1, 128, 256], 'layer3.0.downsample.0.weight'),
 ([256], 'layer3.0.downsample.1.weight'),
 ([256], 'layer3.0.downsample.1.bias'),
 ([3, 3, 256, 256], 'layer3.1.conv1.weight'),
 ([256], 'layer3.1.bn1.weight'),
 ([256], 'layer3.1.bn1.bias'),
 ([3, 3, 256, 256], 'layer3.1.conv2.weight'),
 ([256], 'layer3.1.bn2.weight'),
 ([256], 'layer3.1.bn2.bias'),
 ([3, 3, 256, 512], 'layer4.0.conv1.weight'),
 ([512], 'layer4.0.bn1.weight'),
 ([512], 'layer4.0.bn1.bias'),
 ([3, 3, 512, 512], 'layer4.0.conv2.weight'),
 ([512], 'layer4.0.bn2.weight'),
 ([512], 'layer4.0.bn2.bias'),
 ([1, 1, 256, 512], 'layer4.0.downsample.0.weight'),
 ([512], 'layer4.0.downsample.1.weight'),
 ([512], 'layer4.0.downsample.1.bias'),
 ([3, 3, 512, 512], 'layer4.1.conv1.weight'),
 ([512], 'layer4.1.bn1.weight'),
 ([512], 'layer4.1.bn1.bias'),
 ([3, 3, 512, 512], 'layer4.1.conv2.weight'),
 ([512], 'layer4.1.bn2.weight'),
 ([512], 'layer4.1.bn2.bias'),
 ([512, 1000], 'fc.weight'),
 ([1000], 'fc.bias'),
 ([64], 'bn1.running_mean'),
 ([64], 'bn1.running_var'),
 ([], 'bn1.num_batches_tracked'),
 ([64], 'layer1.0.bn1.running_mean'),
 ([64], 'layer1.0.bn1.running_var'),
 ([], 'layer1.0.bn1.num_batches_tracked'),
 ([64], 'layer1.0.bn2.running_mean'),
 ([64], 'layer1.0.bn2.running_var'),
 ([], 'layer1.0.bn2.num_batches_tracked'),
 ([64], 'layer1.1.bn1.running_mean'),
 ([64], 'layer1.1.bn1.running_var'),
 ([], 'layer1.1.bn1.num_batches_tracked'),
 ([64], 'layer1.1.bn2.running_mean'),
 ([64], 'layer1.1.bn2.running_var'),
 ([], 'layer1.1.bn2.num_batches_tracked'),
 ([128], 'layer2.0.bn1.running_mean'),
 ([128], 'layer2.0.bn1.running_var'),
 ([], 'layer2.0.bn1.num_batches_tracked'),
 ([128], 'layer2.0.bn2.running_mean'),
 ([128], 'layer2.0.bn2.running_var'),
 ([], 'layer2.0.bn2.num_batches_tracked'),
 ([128], 'layer2.0.downsample.1.running_mean'),
 ([128], 'layer2.0.downsample.1.running_var'),
 ([], 'layer2.0.downsample.1.num_batches_tracked'),
 ([128], 'layer2.1.bn1.running_mean'),
 ([128], 'layer2.1.bn1.running_var'),
 ([], 'layer2.1.bn1.num_batches_tracked'),
 ([128], 'layer2.1.bn2.running_mean'),
 ([128], 'layer2.1.bn2.running_var'),
 ([], 'layer2.1.bn2.num_batches_tracked'),
 ([256], 'layer3.0.bn1.running_mean'),
 ([256], 'layer3.0.bn1.running_var'),
 ([], 'layer3.0.bn1.num_batches_tracked'),
 ([256], 'layer3.0.bn2.running_mean'),
 ([256], 'layer3.0.bn2.running_var'),
 ([], 'layer3.0.bn2.num_batches_tracked'),
 ([256], 'layer3.0.downsample.1.running_mean'),
 ([256], 'layer3.0.downsample.1.running_var'),
 ([], 'layer3.0.downsample.1.num_batches_tracked'),
 ([256], 'layer3.1.bn1.running_mean'),
 ([256], 'layer3.1.bn1.running_var'),
 ([], 'layer3.1.bn1.num_batches_tracked'),
 ([256], 'layer3.1.bn2.running_mean'),
 ([256], 'layer3.1.bn2.running_var'),
 ([], 'layer3.1.bn2.num_batches_tracked'),
 ([512], 'layer4.0.bn1.running_mean'),
 ([512], 'layer4.0.bn1.running_var'),
 ([], 'layer4.0.bn1.num_batches_tracked'),
 ([512], 'layer4.0.bn2.running_mean'),
 ([512], 'layer4.0.bn2.running_var'),
 ([], 'layer4.0.bn2.num_batches_tracked'),
 ([512], 'layer4.0.downsample.1.running_mean'),
 ([512], 'layer4.0.downsample.1.running_var'),
 ([], 'layer4.0.downsample.1.num_batches_tracked'),
 ([512], 'layer4.1.bn1.running_mean'),
 ([512], 'layer4.1.bn1.running_var'),
 ([], 'layer4.1.bn1.num_batches_tracked'),
 ([512], 'layer4.1.bn2.running_mean'),
 ([512], 'layer4.1.bn2.running_var'),
 ([], 'layer4.1.bn2.num_batches_tracked')]

Pytorch resnet18 model shapes:


>>> from torchvision.models import resnet as resnet_torch
>>> mdl = resnet_torch.resnet18()
>>> pp([(list(v.size()), k) for k, v in list(mdl.named_parameters()) + list(mdl.named_buffers())])
[([64, 3, 7, 7], 'conv1.weight'),
 ([64], 'bn1.weight'),
 ([64], 'bn1.bias'),
 ([64, 64, 3, 3], 'layer1.0.conv1.weight'),
 ([64], 'layer1.0.bn1.weight'),
 ([64], 'layer1.0.bn1.bias'),
 ([64, 64, 3, 3], 'layer1.0.conv2.weight'),
 ([64], 'layer1.0.bn2.weight'),
 ([64], 'layer1.0.bn2.bias'),
 ([64, 64, 3, 3], 'layer1.1.conv1.weight'),
 ([64], 'layer1.1.bn1.weight'),
 ([64], 'layer1.1.bn1.bias'),
 ([64, 64, 3, 3], 'layer1.1.conv2.weight'),
 ([64], 'layer1.1.bn2.weight'),
 ([64], 'layer1.1.bn2.bias'),
 ([128, 64, 3, 3], 'layer2.0.conv1.weight'),
 ([128], 'layer2.0.bn1.weight'),
 ([128], 'layer2.0.bn1.bias'),
 ([128, 128, 3, 3], 'layer2.0.conv2.weight'),
 ([128], 'layer2.0.bn2.weight'),
 ([128], 'layer2.0.bn2.bias'),
 ([128, 64, 1, 1], 'layer2.0.downsample.0.weight'),
 ([128], 'layer2.0.downsample.1.weight'),
 ([128], 'layer2.0.downsample.1.bias'),
 ([128, 128, 3, 3], 'layer2.1.conv1.weight'),
 ([128], 'layer2.1.bn1.weight'),
 ([128], 'layer2.1.bn1.bias'),
 ([128, 128, 3, 3], 'layer2.1.conv2.weight'),
 ([128], 'layer2.1.bn2.weight'),
 ([128], 'layer2.1.bn2.bias'),
 ([256, 128, 3, 3], 'layer3.0.conv1.weight'),
 ([256], 'layer3.0.bn1.weight'),
 ([256], 'layer3.0.bn1.bias'),
 ([256, 256, 3, 3], 'layer3.0.conv2.weight'),
 ([256], 'layer3.0.bn2.weight'),
 ([256], 'layer3.0.bn2.bias'),
 ([256, 128, 1, 1], 'layer3.0.downsample.0.weight'),
 ([256], 'layer3.0.downsample.1.weight'),
 ([256], 'layer3.0.downsample.1.bias'),
 ([256, 256, 3, 3], 'layer3.1.conv1.weight'),
 ([256], 'layer3.1.bn1.weight'),
 ([256], 'layer3.1.bn1.bias'),
 ([256, 256, 3, 3], 'layer3.1.conv2.weight'),
 ([256], 'layer3.1.bn2.weight'),
 ([256], 'layer3.1.bn2.bias'),
 ([512, 256, 3, 3], 'layer4.0.conv1.weight'),
 ([512], 'layer4.0.bn1.weight'),
 ([512], 'layer4.0.bn1.bias'),
 ([512, 512, 3, 3], 'layer4.0.conv2.weight'),
 ([512], 'layer4.0.bn2.weight'),
 ([512], 'layer4.0.bn2.bias'),
 ([512, 256, 1, 1], 'layer4.0.downsample.0.weight'),
 ([512], 'layer4.0.downsample.1.weight'),
 ([512], 'layer4.0.downsample.1.bias'),
 ([512, 512, 3, 3], 'layer4.1.conv1.weight'),
 ([512], 'layer4.1.bn1.weight'),
 ([512], 'layer4.1.bn1.bias'),
 ([512, 512, 3, 3], 'layer4.1.conv2.weight'),
 ([512], 'layer4.1.bn2.weight'),
 ([512], 'layer4.1.bn2.bias'),
 ([1000, 512], 'fc.weight'),
 ([1000], 'fc.bias'),
 ([64], 'bn1.running_mean'),
 ([64], 'bn1.running_var'),
 ([], 'bn1.num_batches_tracked'),
 ([64], 'layer1.0.bn1.running_mean'),
 ([64], 'layer1.0.bn1.running_var'),
 ([], 'layer1.0.bn1.num_batches_tracked'),
 ([64], 'layer1.0.bn2.running_mean'),
 ([64], 'layer1.0.bn2.running_var'),
 ([], 'layer1.0.bn2.num_batches_tracked'),
 ([64], 'layer1.1.bn1.running_mean'),
 ([64], 'layer1.1.bn1.running_var'),
 ([], 'layer1.1.bn1.num_batches_tracked'),
 ([64], 'layer1.1.bn2.running_mean'),
 ([64], 'layer1.1.bn2.running_var'),
 ([], 'layer1.1.bn2.num_batches_tracked'),
 ([128], 'layer2.0.bn1.running_mean'),
 ([128], 'layer2.0.bn1.running_var'),
 ([], 'layer2.0.bn1.num_batches_tracked'),
 ([128], 'layer2.0.bn2.running_mean'),
 ([128], 'layer2.0.bn2.running_var'),
 ([], 'layer2.0.bn2.num_batches_tracked'),
 ([128], 'layer2.0.downsample.1.running_mean'),
 ([128], 'layer2.0.downsample.1.running_var'),
 ([], 'layer2.0.downsample.1.num_batches_tracked'),
 ([128], 'layer2.1.bn1.running_mean'),
 ([128], 'layer2.1.bn1.running_var'),
 ([], 'layer2.1.bn1.num_batches_tracked'),
 ([128], 'layer2.1.bn2.running_mean'),
 ([128], 'layer2.1.bn2.running_var'),
 ([], 'layer2.1.bn2.num_batches_tracked'),
 ([256], 'layer3.0.bn1.running_mean'),
 ([256], 'layer3.0.bn1.running_var'),
 ([], 'layer3.0.bn1.num_batches_tracked'),
 ([256], 'layer3.0.bn2.running_mean'),
 ([256], 'layer3.0.bn2.running_var'),
 ([], 'layer3.0.bn2.num_batches_tracked'),
 ([256], 'layer3.0.downsample.1.running_mean'),
 ([256], 'layer3.0.downsample.1.running_var'),
 ([], 'layer3.0.downsample.1.num_batches_tracked'),
 ([256], 'layer3.1.bn1.running_mean'),
 ([256], 'layer3.1.bn1.running_var'),
 ([], 'layer3.1.bn1.num_batches_tracked'),
 ([256], 'layer3.1.bn2.running_mean'),
 ([256], 'layer3.1.bn2.running_var'),
 ([], 'layer3.1.bn2.num_batches_tracked'),
 ([512], 'layer4.0.bn1.running_mean'),
 ([512], 'layer4.0.bn1.running_var'),
 ([], 'layer4.0.bn1.num_batches_tracked'),
 ([512], 'layer4.0.bn2.running_mean'),
 ([512], 'layer4.0.bn2.running_var'),
 ([], 'layer4.0.bn2.num_batches_tracked'),
 ([512], 'layer4.0.downsample.1.running_mean'),
 ([512], 'layer4.0.downsample.1.running_var'),
 ([], 'layer4.0.downsample.1.num_batches_tracked'),
 ([512], 'layer4.1.bn1.running_mean'),
 ([512], 'layer4.1.bn1.running_var'),
 ([], 'layer4.1.bn1.num_batches_tracked'),
 ([512], 'layer4.1.bn2.running_mean'),
 ([512], 'layer4.1.bn2.running_var'),
 ([], 'layer4.1.bn2.num_batches_tracked')]


 tftorch resnet50 model:
 >>> pp([(nn.numel(x), x.name.rsplit(':', 1)[0].replace('/', '.')) for x in list(resnet50.parameters())])
[(9408, 'resnet50.conv1.weight'),
 (64, 'resnet50.bn1.weight'),
 (64, 'resnet50.bn1.bias'),
 (4096, 'resnet50.layer1.0.conv1.weight'),
 (64, 'resnet50.layer1.0.bn1.weight'),
 (64, 'resnet50.layer1.0.bn1.bias'),
 (36864, 'resnet50.layer1.0.conv2.weight'),
 (64, 'resnet50.layer1.0.bn2.weight'),
 (64, 'resnet50.layer1.0.bn2.bias'),
 (16384, 'resnet50.layer1.0.conv3.weight'),
 (256, 'resnet50.layer1.0.bn3.weight'),
 (256, 'resnet50.layer1.0.bn3.bias'),
 (16384, 'resnet50.layer1.conv_2d.weight'),
 (256, 'resnet50.layer1.batch_norm.weight'),
 (256, 'resnet50.layer1.batch_norm.bias'),
 (16384, 'resnet50.layer1.1.conv1.weight'),
 (64, 'resnet50.layer1.1.bn1.weight'),
 (64, 'resnet50.layer1.1.bn1.bias'),
 (36864, 'resnet50.layer1.1.conv2.weight'),
 (64, 'resnet50.layer1.1.bn2.weight'),
 (64, 'resnet50.layer1.1.bn2.bias'),
 (16384, 'resnet50.layer1.1.conv3.weight'),
 (256, 'resnet50.layer1.1.bn3.weight'),
 (256, 'resnet50.layer1.1.bn3.bias'),
 (16384, 'resnet50.layer1.2.conv1.weight'),
 (64, 'resnet50.layer1.2.bn1.weight'),
 (64, 'resnet50.layer1.2.bn1.bias'),
 (36864, 'resnet50.layer1.2.conv2.weight'),
 (64, 'resnet50.layer1.2.bn2.weight'),
 (64, 'resnet50.layer1.2.bn2.bias'),
 (16384, 'resnet50.layer1.2.conv3.weight'),
 (256, 'resnet50.layer1.2.bn3.weight'),
 (256, 'resnet50.layer1.2.bn3.bias'),
 (32768, 'resnet50.layer2.0.conv1.weight'),
 (128, 'resnet50.layer2.0.bn1.weight'),
 (128, 'resnet50.layer2.0.bn1.bias'),
 (147456, 'resnet50.layer2.0.conv2.weight'),
 (128, 'resnet50.layer2.0.bn2.weight'),
 (128, 'resnet50.layer2.0.bn2.bias'),
 (65536, 'resnet50.layer2.0.conv3.weight'),
 (512, 'resnet50.layer2.0.bn3.weight'),
 (512, 'resnet50.layer2.0.bn3.bias'),
 (131072, 'resnet50.layer2.conv_2d.weight'),
 (512, 'resnet50.layer2.batch_norm.weight'),
 (512, 'resnet50.layer2.batch_norm.bias'),
 (65536, 'resnet50.layer2.1.conv1.weight'),
 (128, 'resnet50.layer2.1.bn1.weight'),
 (128, 'resnet50.layer2.1.bn1.bias'),
 (147456, 'resnet50.layer2.1.conv2.weight'),
 (128, 'resnet50.layer2.1.bn2.weight'),
 (128, 'resnet50.layer2.1.bn2.bias'),
 (65536, 'resnet50.layer2.1.conv3.weight'),
 (512, 'resnet50.layer2.1.bn3.weight'),
 (512, 'resnet50.layer2.1.bn3.bias'),
 (65536, 'resnet50.layer2.2.conv1.weight'),
 (128, 'resnet50.layer2.2.bn1.weight'),
 (128, 'resnet50.layer2.2.bn1.bias'),
 (147456, 'resnet50.layer2.2.conv2.weight'),
 (128, 'resnet50.layer2.2.bn2.weight'),
 (128, 'resnet50.layer2.2.bn2.bias'),
 (65536, 'resnet50.layer2.2.conv3.weight'),
 (512, 'resnet50.layer2.2.bn3.weight'),
 (512, 'resnet50.layer2.2.bn3.bias'),
 (65536, 'resnet50.layer2.3.conv1.weight'),
 (128, 'resnet50.layer2.3.bn1.weight'),
 (128, 'resnet50.layer2.3.bn1.bias'),
 (147456, 'resnet50.layer2.3.conv2.weight'),
 (128, 'resnet50.layer2.3.bn2.weight'),
 (128, 'resnet50.layer2.3.bn2.bias'),
 (65536, 'resnet50.layer2.3.conv3.weight'),
 (512, 'resnet50.layer2.3.bn3.weight'),
 (512, 'resnet50.layer2.3.bn3.bias'),
 (131072, 'resnet50.layer3.0.conv1.weight'),
 (256, 'resnet50.layer3.0.bn1.weight'),
 (256, 'resnet50.layer3.0.bn1.bias'),
 (589824, 'resnet50.layer3.0.conv2.weight'),
 (256, 'resnet50.layer3.0.bn2.weight'),
 (256, 'resnet50.layer3.0.bn2.bias'),
 (262144, 'resnet50.layer3.0.conv3.weight'),
 (1024, 'resnet50.layer3.0.bn3.weight'),
 (1024, 'resnet50.layer3.0.bn3.bias'),
 (524288, 'resnet50.layer3.conv_2d.weight'),
 (1024, 'resnet50.layer3.batch_norm.weight'),
 (1024, 'resnet50.layer3.batch_norm.bias'),
 (262144, 'resnet50.layer3.1.conv1.weight'),
 (256, 'resnet50.layer3.1.bn1.weight'),
 (256, 'resnet50.layer3.1.bn1.bias'),
 (589824, 'resnet50.layer3.1.conv2.weight'),
 (256, 'resnet50.layer3.1.bn2.weight'),
 (256, 'resnet50.layer3.1.bn2.bias'),
 (262144, 'resnet50.layer3.1.conv3.weight'),
 (1024, 'resnet50.layer3.1.bn3.weight'),
 (1024, 'resnet50.layer3.1.bn3.bias'),
 (262144, 'resnet50.layer3.2.conv1.weight'),
 (256, 'resnet50.layer3.2.bn1.weight'),
 (256, 'resnet50.layer3.2.bn1.bias'),
 (589824, 'resnet50.layer3.2.conv2.weight'),
 (256, 'resnet50.layer3.2.bn2.weight'),
 (256, 'resnet50.layer3.2.bn2.bias'),
 (262144, 'resnet50.layer3.2.conv3.weight'),
 (1024, 'resnet50.layer3.2.bn3.weight'),
 (1024, 'resnet50.layer3.2.bn3.bias'),
 (262144, 'resnet50.layer3.3.conv1.weight'),
 (256, 'resnet50.layer3.3.bn1.weight'),
 (256, 'resnet50.layer3.3.bn1.bias'),
 (589824, 'resnet50.layer3.3.conv2.weight'),
 (256, 'resnet50.layer3.3.bn2.weight'),
 (256, 'resnet50.layer3.3.bn2.bias'),
 (262144, 'resnet50.layer3.3.conv3.weight'),
 (1024, 'resnet50.layer3.3.bn3.weight'),
 (1024, 'resnet50.layer3.3.bn3.bias'),
 (262144, 'resnet50.layer3.4.conv1.weight'),
 (256, 'resnet50.layer3.4.bn1.weight'),
 (256, 'resnet50.layer3.4.bn1.bias'),
 (589824, 'resnet50.layer3.4.conv2.weight'),
 (256, 'resnet50.layer3.4.bn2.weight'),
 (256, 'resnet50.layer3.4.bn2.bias'),
 (262144, 'resnet50.layer3.4.conv3.weight'),
 (1024, 'resnet50.layer3.4.bn3.weight'),
 (1024, 'resnet50.layer3.4.bn3.bias'),
 (262144, 'resnet50.layer3.5.conv1.weight'),
 (256, 'resnet50.layer3.5.bn1.weight'),
 (256, 'resnet50.layer3.5.bn1.bias'),
 (589824, 'resnet50.layer3.5.conv2.weight'),
 (256, 'resnet50.layer3.5.bn2.weight'),
 (256, 'resnet50.layer3.5.bn2.bias'),
 (262144, 'resnet50.layer3.5.conv3.weight'),
 (1024, 'resnet50.layer3.5.bn3.weight'),
 (1024, 'resnet50.layer3.5.bn3.bias'),
 (524288, 'resnet50.layer4.0.conv1.weight'),
 (512, 'resnet50.layer4.0.bn1.weight'),
 (512, 'resnet50.layer4.0.bn1.bias'),
 (2359296, 'resnet50.layer4.0.conv2.weight'),
 (512, 'resnet50.layer4.0.bn2.weight'),
 (512, 'resnet50.layer4.0.bn2.bias'),
 (1048576, 'resnet50.layer4.0.conv3.weight'),
 (2048, 'resnet50.layer4.0.bn3.weight'),
 (2048, 'resnet50.layer4.0.bn3.bias'),
 (2097152, 'resnet50.layer4.conv_2d.weight'),
 (2048, 'resnet50.layer4.batch_norm.weight'),
 (2048, 'resnet50.layer4.batch_norm.bias'),
 (1048576, 'resnet50.layer4.1.conv1.weight'),
 (512, 'resnet50.layer4.1.bn1.weight'),
 (512, 'resnet50.layer4.1.bn1.bias'),
 (2359296, 'resnet50.layer4.1.conv2.weight'),
 (512, 'resnet50.layer4.1.bn2.weight'),
 (512, 'resnet50.layer4.1.bn2.bias'),
 (1048576, 'resnet50.layer4.1.conv3.weight'),
 (2048, 'resnet50.layer4.1.bn3.weight'),
 (2048, 'resnet50.layer4.1.bn3.bias'),
 (1048576, 'resnet50.layer4.2.conv1.weight'),
 (512, 'resnet50.layer4.2.bn1.weight'),
 (512, 'resnet50.layer4.2.bn1.bias'),
 (2359296, 'resnet50.layer4.2.conv2.weight'),
 (512, 'resnet50.layer4.2.bn2.weight'),
 (512, 'resnet50.layer4.2.bn2.bias'),
 (1048576, 'resnet50.layer4.2.conv3.weight'),
 (2048, 'resnet50.layer4.2.bn3.weight'),
 (2048, 'resnet50.layer4.2.bn3.bias'),
 (2048000, 'resnet50.fc.weight'),
 (1000, 'resnet50.fc.bias')]


>>> resnet50
ResNet(
  IN:  f32[1,256,256,3, name='IteratorGetNext_3:1'],
  OUT: f32[1,1000, name='resnet50_1/fc/BiasAdd:0']
  (conv1): Conv2d(
    3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
    IN:  f32[1,256,256,3, name='IteratorGetNext_3:1'],
    OUT: f32[1,128,128,64, name='resnet50_1/conv1/Conv2D:0']
  )
  (bn1): BatchNorm2d(
    64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
    IN:  f32[1,128,128,64, name='resnet50_1/conv1/Conv2D:0'],
    OUT: f32[1,128,128,64, name='resnet50_1/bn1/batchnorm/add_1:0']
  )
  (relu): ReLU(
    inplace=True
    IN:  f32[1,128,128,64, name='resnet50_1/bn1/batchnorm/add_1:0'],
    OUT: f32[1,128,128,64, name='resnet50_1/relu/Relu:0']
  )
  (maxpool): MaxPool2d(
    kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False
    IN:  f32[1,128,128,64, name='resnet50_1/relu/Relu:0'],
    OUT: f32[1,64,64,64, name='resnet50_1/maxpool/MaxPool2d:0']
  )
  (layer1): Sequential(
    IN:  f32[1,64,64,64, name='resnet50_1/maxpool/MaxPool2d:0'],
    OUT: f32[1,64,64,256, name='resnet50_1/Sequential/2/relu_2/Relu:0']
    (0): Bottleneck(
      IN:  f32[1,64,64,64, name='resnet50_1/maxpool/MaxPool2d:0'],
      OUT: f32[1,64,64,256, name='resnet50_1/Sequential/0/relu_2/Relu:0']
      (conv1): Conv2d(
        64, 64, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,64,64,64, name='resnet50_1/maxpool/MaxPool2d:0'],
        OUT: f32[1,64,64,64, name='resnet50_1/Sequential/0/conv1/Conv2D:0']
      )
      (bn1): BatchNorm2d(
        64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,64,64,64, name='resnet50_1/Sequential/0/conv1/Conv2D:0'],
        OUT: f32[1,64,64,64, name='resnet50_1/Sequential/0/bn1/batchnorm/add_1:0']
      )
      (conv2): Conv2d(
        64, 64, kernel_size=(3, 3), stride=(1, 1), padding=SAME, bias=False
        IN:  f32[1,64,64,64, name='resnet50_1/Sequential/0/relu/Relu:0'],
        OUT: f32[1,64,64,64, name='resnet50_1/Sequential/0/conv2/Conv2D:0']
      )
      (bn2): BatchNorm2d(
        64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,64,64,64, name='resnet50_1/Sequential/0/conv2/Conv2D:0'],
        OUT: f32[1,64,64,64, name='resnet50_1/Sequential/0/bn2/batchnorm/add_1:0']
      )
      (conv3): Conv2d(
        64, 256, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,64,64,64, name='resnet50_1/Sequential/0/relu_1/Relu:0'],
        OUT: f32[1,64,64,256, name='resnet50_1/Sequential/0/conv3/Conv2D:0']
      )
      (bn3): BatchNorm2d(
        256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,64,64,256, name='resnet50_1/Sequential/0/conv3/Conv2D:0'],
        OUT: f32[1,64,64,256, name='resnet50_1/Sequential/0/bn3/batchnorm/add_1:0']
      )
      (relu): ReLU(
        inplace=True
        IN:  f32[1,64,64,256, name='resnet50_1/Sequential/0/add:0'],
        OUT: f32[1,64,64,256, name='resnet50_1/Sequential/0/relu_2/Relu:0']
      )
      (downsample): Sequential(
        IN:  f32[1,64,64,64, name='resnet50_1/maxpool/MaxPool2d:0'],
        OUT: f32[1,64,64,256, name='resnet50_1/Sequential/0/Sequential/batch_norm/batchnorm/add_1:0']
        (0): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
          IN:  f32[1,64,64,64, name='resnet50_1/maxpool/MaxPool2d:0'],
          OUT: f32[1,64,64,256, name='resnet50_1/Sequential/0/Sequential/conv_2d/Conv2D:0']
        )
        (1): BatchNorm2d(
          256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
          IN:  f32[1,64,64,256, name='resnet50_1/Sequential/0/Sequential/conv_2d/Conv2D:0'],
          OUT: f32[1,64,64,256, name='resnet50_1/Sequential/0/Sequential/batch_norm/batchnorm/add_1:0']
        )
      )
    )
    (1): Bottleneck(
      IN:  f32[1,64,64,256, name='resnet50_1/Sequential/0/relu_2/Relu:0'],
      OUT: f32[1,64,64,256, name='resnet50_1/Sequential/1/relu_2/Relu:0']
      (conv1): Conv2d(
        256, 64, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,64,64,256, name='resnet50_1/Sequential/0/relu_2/Relu:0'],
        OUT: f32[1,64,64,64, name='resnet50_1/Sequential/1/conv1/Conv2D:0']
      )
      (bn1): BatchNorm2d(
        64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,64,64,64, name='resnet50_1/Sequential/1/conv1/Conv2D:0'],
        OUT: f32[1,64,64,64, name='resnet50_1/Sequential/1/bn1/batchnorm/add_1:0']
      )
      (conv2): Conv2d(
        64, 64, kernel_size=(3, 3), stride=(1, 1), padding=SAME, bias=False
        IN:  f32[1,64,64,64, name='resnet50_1/Sequential/1/relu/Relu:0'],
        OUT: f32[1,64,64,64, name='resnet50_1/Sequential/1/conv2/Conv2D:0']
      )
      (bn2): BatchNorm2d(
        64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,64,64,64, name='resnet50_1/Sequential/1/conv2/Conv2D:0'],
        OUT: f32[1,64,64,64, name='resnet50_1/Sequential/1/bn2/batchnorm/add_1:0']
      )
      (conv3): Conv2d(
        64, 256, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,64,64,64, name='resnet50_1/Sequential/1/relu_1/Relu:0'],
        OUT: f32[1,64,64,256, name='resnet50_1/Sequential/1/conv3/Conv2D:0']
      )
      (bn3): BatchNorm2d(
        256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,64,64,256, name='resnet50_1/Sequential/1/conv3/Conv2D:0'],
        OUT: f32[1,64,64,256, name='resnet50_1/Sequential/1/bn3/batchnorm/add_1:0']
      )
      (relu): ReLU(
        inplace=True
        IN:  f32[1,64,64,256, name='resnet50_1/Sequential/1/add:0'],
        OUT: f32[1,64,64,256, name='resnet50_1/Sequential/1/relu_2/Relu:0']
      )
    )
    (2): Bottleneck(
      IN:  f32[1,64,64,256, name='resnet50_1/Sequential/1/relu_2/Relu:0'],
      OUT: f32[1,64,64,256, name='resnet50_1/Sequential/2/relu_2/Relu:0']
      (conv1): Conv2d(
        256, 64, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,64,64,256, name='resnet50_1/Sequential/1/relu_2/Relu:0'],
        OUT: f32[1,64,64,64, name='resnet50_1/Sequential/2/conv1/Conv2D:0']
      )
      (bn1): BatchNorm2d(
        64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,64,64,64, name='resnet50_1/Sequential/2/conv1/Conv2D:0'],
        OUT: f32[1,64,64,64, name='resnet50_1/Sequential/2/bn1/batchnorm/add_1:0']
      )
      (conv2): Conv2d(
        64, 64, kernel_size=(3, 3), stride=(1, 1), padding=SAME, bias=False
        IN:  f32[1,64,64,64, name='resnet50_1/Sequential/2/relu/Relu:0'],
        OUT: f32[1,64,64,64, name='resnet50_1/Sequential/2/conv2/Conv2D:0']
      )
      (bn2): BatchNorm2d(
        64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,64,64,64, name='resnet50_1/Sequential/2/conv2/Conv2D:0'],
        OUT: f32[1,64,64,64, name='resnet50_1/Sequential/2/bn2/batchnorm/add_1:0']
      )
      (conv3): Conv2d(
        64, 256, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,64,64,64, name='resnet50_1/Sequential/2/relu_1/Relu:0'],
        OUT: f32[1,64,64,256, name='resnet50_1/Sequential/2/conv3/Conv2D:0']
      )
      (bn3): BatchNorm2d(
        256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,64,64,256, name='resnet50_1/Sequential/2/conv3/Conv2D:0'],
        OUT: f32[1,64,64,256, name='resnet50_1/Sequential/2/bn3/batchnorm/add_1:0']
      )
      (relu): ReLU(
        inplace=True
        IN:  f32[1,64,64,256, name='resnet50_1/Sequential/2/add:0'],
        OUT: f32[1,64,64,256, name='resnet50_1/Sequential/2/relu_2/Relu:0']
      )
    )
  )
  (layer2): Sequential(
    IN:  f32[1,64,64,256, name='resnet50_1/Sequential/2/relu_2/Relu:0'],
    OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/3/relu_2/Relu:0']
    (0): Bottleneck(
      IN:  f32[1,64,64,256, name='resnet50_1/Sequential/2/relu_2/Relu:0'],
      OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/0/relu_2/Relu:0']
      (conv1): Conv2d(
        256, 128, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,64,64,256, name='resnet50_1/Sequential/2/relu_2/Relu:0'],
        OUT: f32[1,64,64,128, name='resnet50_1/Sequential_1/0/conv1/Conv2D:0']
      )
      (bn1): BatchNorm2d(
        128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,64,64,128, name='resnet50_1/Sequential_1/0/conv1/Conv2D:0'],
        OUT: f32[1,64,64,128, name='resnet50_1/Sequential_1/0/bn1/batchnorm/add_1:0']
      )
      (conv2): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(2, 2), padding=SAME, bias=False
        IN:  f32[1,64,64,128, name='resnet50_1/Sequential_1/0/relu/Relu:0'],
        OUT: f32[1,32,32,128, name='resnet50_1/Sequential_1/0/conv2/Conv2D:0']
      )
      (bn2): BatchNorm2d(
        128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,32,32,128, name='resnet50_1/Sequential_1/0/conv2/Conv2D:0'],
        OUT: f32[1,32,32,128, name='resnet50_1/Sequential_1/0/bn2/batchnorm/add_1:0']
      )
      (conv3): Conv2d(
        128, 512, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,32,32,128, name='resnet50_1/Sequential_1/0/relu_1/Relu:0'],
        OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/0/conv3/Conv2D:0']
      )
      (bn3): BatchNorm2d(
        512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/0/conv3/Conv2D:0'],
        OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/0/bn3/batchnorm/add_1:0']
      )
      (relu): ReLU(
        inplace=True
        IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/0/add:0'],
        OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/0/relu_2/Relu:0']
      )
      (downsample): Sequential(
        IN:  f32[1,64,64,256, name='resnet50_1/Sequential/2/relu_2/Relu:0'],
        OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/0/Sequential/batch_norm/batchnorm/add_1:0']
        (0): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), padding=VALID, bias=False
          IN:  f32[1,64,64,256, name='resnet50_1/Sequential/2/relu_2/Relu:0'],
          OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/0/Sequential/conv_2d/Conv2D:0']
        )
        (1): BatchNorm2d(
          512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
          IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/0/Sequential/conv_2d/Conv2D:0'],
          OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/0/Sequential/batch_norm/batchnorm/add_1:0']
        )
      )
    )
    (1): Bottleneck(
      IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/0/relu_2/Relu:0'],
      OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/1/relu_2/Relu:0']
      (conv1): Conv2d(
        512, 128, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/0/relu_2/Relu:0'],
        OUT: f32[1,32,32,128, name='resnet50_1/Sequential_1/1/conv1/Conv2D:0']
      )
      (bn1): BatchNorm2d(
        128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,32,32,128, name='resnet50_1/Sequential_1/1/conv1/Conv2D:0'],
        OUT: f32[1,32,32,128, name='resnet50_1/Sequential_1/1/bn1/batchnorm/add_1:0']
      )
      (conv2): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=SAME, bias=False
        IN:  f32[1,32,32,128, name='resnet50_1/Sequential_1/1/relu/Relu:0'],
        OUT: f32[1,32,32,128, name='resnet50_1/Sequential_1/1/conv2/Conv2D:0']
      )
      (bn2): BatchNorm2d(
        128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,32,32,128, name='resnet50_1/Sequential_1/1/conv2/Conv2D:0'],
        OUT: f32[1,32,32,128, name='resnet50_1/Sequential_1/1/bn2/batchnorm/add_1:0']
      )
      (conv3): Conv2d(
        128, 512, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,32,32,128, name='resnet50_1/Sequential_1/1/relu_1/Relu:0'],
        OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/1/conv3/Conv2D:0']
      )
      (bn3): BatchNorm2d(
        512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/1/conv3/Conv2D:0'],
        OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/1/bn3/batchnorm/add_1:0']
      )
      (relu): ReLU(
        inplace=True
        IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/1/add:0'],
        OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/1/relu_2/Relu:0']
      )
    )
    (2): Bottleneck(
      IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/1/relu_2/Relu:0'],
      OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/2/relu_2/Relu:0']
      (conv1): Conv2d(
        512, 128, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/1/relu_2/Relu:0'],
        OUT: f32[1,32,32,128, name='resnet50_1/Sequential_1/2/conv1/Conv2D:0']
      )
      (bn1): BatchNorm2d(
        128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,32,32,128, name='resnet50_1/Sequential_1/2/conv1/Conv2D:0'],
        OUT: f32[1,32,32,128, name='resnet50_1/Sequential_1/2/bn1/batchnorm/add_1:0']
      )
      (conv2): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=SAME, bias=False
        IN:  f32[1,32,32,128, name='resnet50_1/Sequential_1/2/relu/Relu:0'],
        OUT: f32[1,32,32,128, name='resnet50_1/Sequential_1/2/conv2/Conv2D:0']
      )
      (bn2): BatchNorm2d(
        128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,32,32,128, name='resnet50_1/Sequential_1/2/conv2/Conv2D:0'],
        OUT: f32[1,32,32,128, name='resnet50_1/Sequential_1/2/bn2/batchnorm/add_1:0']
      )
      (conv3): Conv2d(
        128, 512, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,32,32,128, name='resnet50_1/Sequential_1/2/relu_1/Relu:0'],
        OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/2/conv3/Conv2D:0']
      )
      (bn3): BatchNorm2d(
        512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/2/conv3/Conv2D:0'],
        OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/2/bn3/batchnorm/add_1:0']
      )
      (relu): ReLU(
        inplace=True
        IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/2/add:0'],
        OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/2/relu_2/Relu:0']
      )
    )
    (3): Bottleneck(
      IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/2/relu_2/Relu:0'],
      OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/3/relu_2/Relu:0']
      (conv1): Conv2d(
        512, 128, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/2/relu_2/Relu:0'],
        OUT: f32[1,32,32,128, name='resnet50_1/Sequential_1/3/conv1/Conv2D:0']
      )
      (bn1): BatchNorm2d(
        128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,32,32,128, name='resnet50_1/Sequential_1/3/conv1/Conv2D:0'],
        OUT: f32[1,32,32,128, name='resnet50_1/Sequential_1/3/bn1/batchnorm/add_1:0']
      )
      (conv2): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=SAME, bias=False
        IN:  f32[1,32,32,128, name='resnet50_1/Sequential_1/3/relu/Relu:0'],
        OUT: f32[1,32,32,128, name='resnet50_1/Sequential_1/3/conv2/Conv2D:0']
      )
      (bn2): BatchNorm2d(
        128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,32,32,128, name='resnet50_1/Sequential_1/3/conv2/Conv2D:0'],
        OUT: f32[1,32,32,128, name='resnet50_1/Sequential_1/3/bn2/batchnorm/add_1:0']
      )
      (conv3): Conv2d(
        128, 512, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,32,32,128, name='resnet50_1/Sequential_1/3/relu_1/Relu:0'],
        OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/3/conv3/Conv2D:0']
      )
      (bn3): BatchNorm2d(
        512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/3/conv3/Conv2D:0'],
        OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/3/bn3/batchnorm/add_1:0']
      )
      (relu): ReLU(
        inplace=True
        IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/3/add:0'],
        OUT: f32[1,32,32,512, name='resnet50_1/Sequential_1/3/relu_2/Relu:0']
      )
    )
  )
  (layer3): Sequential(
    IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/3/relu_2/Relu:0'],
    OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/5/relu_2/Relu:0']
    (0): Bottleneck(
      IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/3/relu_2/Relu:0'],
      OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/0/relu_2/Relu:0']
      (conv1): Conv2d(
        512, 256, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/3/relu_2/Relu:0'],
        OUT: f32[1,32,32,256, name='resnet50_1/Sequential_2/0/conv1/Conv2D:0']
      )
      (bn1): BatchNorm2d(
        256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,32,32,256, name='resnet50_1/Sequential_2/0/conv1/Conv2D:0'],
        OUT: f32[1,32,32,256, name='resnet50_1/Sequential_2/0/bn1/batchnorm/add_1:0']
      )
      (conv2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(2, 2), padding=SAME, bias=False
        IN:  f32[1,32,32,256, name='resnet50_1/Sequential_2/0/relu/Relu:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/0/conv2/Conv2D:0']
      )
      (bn2): BatchNorm2d(
        256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/0/conv2/Conv2D:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/0/bn2/batchnorm/add_1:0']
      )
      (conv3): Conv2d(
        256, 1024, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/0/relu_1/Relu:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/0/conv3/Conv2D:0']
      )
      (bn3): BatchNorm2d(
        1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/0/conv3/Conv2D:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/0/bn3/batchnorm/add_1:0']
      )
      (relu): ReLU(
        inplace=True
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/0/add:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/0/relu_2/Relu:0']
      )
      (downsample): Sequential(
        IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/3/relu_2/Relu:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/0/Sequential/batch_norm/batchnorm/add_1:0']
        (0): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), padding=VALID, bias=False
          IN:  f32[1,32,32,512, name='resnet50_1/Sequential_1/3/relu_2/Relu:0'],
          OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/0/Sequential/conv_2d/Conv2D:0']
        )
        (1): BatchNorm2d(
          1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
          IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/0/Sequential/conv_2d/Conv2D:0'],
          OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/0/Sequential/batch_norm/batchnorm/add_1:0']
        )
      )
    )
    (1): Bottleneck(
      IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/0/relu_2/Relu:0'],
      OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/1/relu_2/Relu:0']
      (conv1): Conv2d(
        1024, 256, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/0/relu_2/Relu:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/1/conv1/Conv2D:0']
      )
      (bn1): BatchNorm2d(
        256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/1/conv1/Conv2D:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/1/bn1/batchnorm/add_1:0']
      )
      (conv2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=SAME, bias=False
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/1/relu/Relu:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/1/conv2/Conv2D:0']
      )
      (bn2): BatchNorm2d(
        256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/1/conv2/Conv2D:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/1/bn2/batchnorm/add_1:0']
      )
      (conv3): Conv2d(
        256, 1024, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/1/relu_1/Relu:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/1/conv3/Conv2D:0']
      )
      (bn3): BatchNorm2d(
        1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/1/conv3/Conv2D:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/1/bn3/batchnorm/add_1:0']
      )
      (relu): ReLU(
        inplace=True
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/1/add:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/1/relu_2/Relu:0']
      )
    )
    (2): Bottleneck(
      IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/1/relu_2/Relu:0'],
      OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/2/relu_2/Relu:0']
      (conv1): Conv2d(
        1024, 256, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/1/relu_2/Relu:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/2/conv1/Conv2D:0']
      )
      (bn1): BatchNorm2d(
        256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/2/conv1/Conv2D:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/2/bn1/batchnorm/add_1:0']
      )
      (conv2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=SAME, bias=False
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/2/relu/Relu:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/2/conv2/Conv2D:0']
      )
      (bn2): BatchNorm2d(
        256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/2/conv2/Conv2D:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/2/bn2/batchnorm/add_1:0']
      )
      (conv3): Conv2d(
        256, 1024, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/2/relu_1/Relu:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/2/conv3/Conv2D:0']
      )
      (bn3): BatchNorm2d(
        1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/2/conv3/Conv2D:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/2/bn3/batchnorm/add_1:0']
      )
      (relu): ReLU(
        inplace=True
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/2/add:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/2/relu_2/Relu:0']
      )
    )
    (3): Bottleneck(
      IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/2/relu_2/Relu:0'],
      OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/3/relu_2/Relu:0']
      (conv1): Conv2d(
        1024, 256, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/2/relu_2/Relu:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/3/conv1/Conv2D:0']
      )
      (bn1): BatchNorm2d(
        256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/3/conv1/Conv2D:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/3/bn1/batchnorm/add_1:0']
      )
      (conv2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=SAME, bias=False
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/3/relu/Relu:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/3/conv2/Conv2D:0']
      )
      (bn2): BatchNorm2d(
        256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/3/conv2/Conv2D:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/3/bn2/batchnorm/add_1:0']
      )
      (conv3): Conv2d(
        256, 1024, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/3/relu_1/Relu:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/3/conv3/Conv2D:0']
      )
      (bn3): BatchNorm2d(
        1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/3/conv3/Conv2D:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/3/bn3/batchnorm/add_1:0']
      )
      (relu): ReLU(
        inplace=True
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/3/add:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/3/relu_2/Relu:0']
      )
    )
    (4): Bottleneck(
      IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/3/relu_2/Relu:0'],
      OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/4/relu_2/Relu:0']
      (conv1): Conv2d(
        1024, 256, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/3/relu_2/Relu:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/4/conv1/Conv2D:0']
      )
      (bn1): BatchNorm2d(
        256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/4/conv1/Conv2D:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/4/bn1/batchnorm/add_1:0']
      )
      (conv2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=SAME, bias=False
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/4/relu/Relu:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/4/conv2/Conv2D:0']
      )
      (bn2): BatchNorm2d(
        256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/4/conv2/Conv2D:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/4/bn2/batchnorm/add_1:0']
      )
      (conv3): Conv2d(
        256, 1024, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/4/relu_1/Relu:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/4/conv3/Conv2D:0']
      )
      (bn3): BatchNorm2d(
        1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/4/conv3/Conv2D:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/4/bn3/batchnorm/add_1:0']
      )
      (relu): ReLU(
        inplace=True
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/4/add:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/4/relu_2/Relu:0']
      )
    )
    (5): Bottleneck(
      IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/4/relu_2/Relu:0'],
      OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/5/relu_2/Relu:0']
      (conv1): Conv2d(
        1024, 256, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/4/relu_2/Relu:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/5/conv1/Conv2D:0']
      )
      (bn1): BatchNorm2d(
        256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/5/conv1/Conv2D:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/5/bn1/batchnorm/add_1:0']
      )
      (conv2): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=SAME, bias=False
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/5/relu/Relu:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/5/conv2/Conv2D:0']
      )
      (bn2): BatchNorm2d(
        256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/5/conv2/Conv2D:0'],
        OUT: f32[1,16,16,256, name='resnet50_1/Sequential_2/5/bn2/batchnorm/add_1:0']
      )
      (conv3): Conv2d(
        256, 1024, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,16,16,256, name='resnet50_1/Sequential_2/5/relu_1/Relu:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/5/conv3/Conv2D:0']
      )
      (bn3): BatchNorm2d(
        1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/5/conv3/Conv2D:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/5/bn3/batchnorm/add_1:0']
      )
      (relu): ReLU(
        inplace=True
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/5/add:0'],
        OUT: f32[1,16,16,1024, name='resnet50_1/Sequential_2/5/relu_2/Relu:0']
      )
    )
  )
  (layer4): Sequential(
    IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/5/relu_2/Relu:0'],
    OUT: f32[1,8,8,2048, name='resnet50_1/Sequential_3/2/relu_2/Relu:0']
    (0): Bottleneck(
      IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/5/relu_2/Relu:0'],
      OUT: f32[1,8,8,2048, name='resnet50_1/Sequential_3/0/relu_2/Relu:0']
      (conv1): Conv2d(
        1024, 512, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/5/relu_2/Relu:0'],
        OUT: f32[1,16,16,512, name='resnet50_1/Sequential_3/0/conv1/Conv2D:0']
      )
      (bn1): BatchNorm2d(
        512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,16,16,512, name='resnet50_1/Sequential_3/0/conv1/Conv2D:0'],
        OUT: f32[1,16,16,512, name='resnet50_1/Sequential_3/0/bn1/batchnorm/add_1:0']
      )
      (conv2): Conv2d(
        512, 512, kernel_size=(3, 3), stride=(2, 2), padding=SAME, bias=False
        IN:  f32[1,16,16,512, name='resnet50_1/Sequential_3/0/relu/Relu:0'],
        OUT: f32[1,8,8,512, name='resnet50_1/Sequential_3/0/conv2/Conv2D:0']
      )
      (bn2): BatchNorm2d(
        512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,8,8,512, name='resnet50_1/Sequential_3/0/conv2/Conv2D:0'],
        OUT: f32[1,8,8,512, name='resnet50_1/Sequential_3/0/bn2/batchnorm/add_1:0']
      )
      (conv3): Conv2d(
        512, 2048, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,8,8,512, name='resnet50_1/Sequential_3/0/relu_1/Relu:0'],
        OUT: f32[1,8,8,2048, name='resnet50_1/Sequential_3/0/conv3/Conv2D:0']
      )
      (bn3): BatchNorm2d(
        2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,8,8,2048, name='resnet50_1/Sequential_3/0/conv3/Conv2D:0'],
        OUT: f32[1,8,8,2048, name='resnet50_1/Sequential_3/0/bn3/batchnorm/add_1:0']
      )
      (relu): ReLU(
        inplace=True
        IN:  f32[1,8,8,2048, name='resnet50_1/Sequential_3/0/add:0'],
        OUT: f32[1,8,8,2048, name='resnet50_1/Sequential_3/0/relu_2/Relu:0']
      )
      (downsample): Sequential(
        IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/5/relu_2/Relu:0'],
        OUT: f32[1,8,8,2048, name='resnet50_1/Sequential_3/0/Sequential/batch_norm/batchnorm/add_1:0']
        (0): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), padding=VALID, bias=False
          IN:  f32[1,16,16,1024, name='resnet50_1/Sequential_2/5/relu_2/Relu:0'],
          OUT: f32[1,8,8,2048, name='resnet50_1/Sequential_3/0/Sequential/conv_2d/Conv2D:0']
        )
        (1): BatchNorm2d(
          2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
          IN:  f32[1,8,8,2048, name='resnet50_1/Sequential_3/0/Sequential/conv_2d/Conv2D:0'],
          OUT: f32[1,8,8,2048, name='resnet50_1/Sequential_3/0/Sequential/batch_norm/batchnorm/add_1:0']
        )
      )
    )
    (1): Bottleneck(
      IN:  f32[1,8,8,2048, name='resnet50_1/Sequential_3/0/relu_2/Relu:0'],
      OUT: f32[1,8,8,2048, name='resnet50_1/Sequential_3/1/relu_2/Relu:0']
      (conv1): Conv2d(
        2048, 512, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,8,8,2048, name='resnet50_1/Sequential_3/0/relu_2/Relu:0'],
        OUT: f32[1,8,8,512, name='resnet50_1/Sequential_3/1/conv1/Conv2D:0']
      )
      (bn1): BatchNorm2d(
        512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,8,8,512, name='resnet50_1/Sequential_3/1/conv1/Conv2D:0'],
        OUT: f32[1,8,8,512, name='resnet50_1/Sequential_3/1/bn1/batchnorm/add_1:0']
      )
      (conv2): Conv2d(
        512, 512, kernel_size=(3, 3), stride=(1, 1), padding=SAME, bias=False
        IN:  f32[1,8,8,512, name='resnet50_1/Sequential_3/1/relu/Relu:0'],
        OUT: f32[1,8,8,512, name='resnet50_1/Sequential_3/1/conv2/Conv2D:0']
      )
      (bn2): BatchNorm2d(
        512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,8,8,512, name='resnet50_1/Sequential_3/1/conv2/Conv2D:0'],
        OUT: f32[1,8,8,512, name='resnet50_1/Sequential_3/1/bn2/batchnorm/add_1:0']
      )
      (conv3): Conv2d(
        512, 2048, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,8,8,512, name='resnet50_1/Sequential_3/1/relu_1/Relu:0'],
        OUT: f32[1,8,8,2048, name='resnet50_1/Sequential_3/1/conv3/Conv2D:0']
      )
      (bn3): BatchNorm2d(
        2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,8,8,2048, name='resnet50_1/Sequential_3/1/conv3/Conv2D:0'],
        OUT: f32[1,8,8,2048, name='resnet50_1/Sequential_3/1/bn3/batchnorm/add_1:0']
      )
      (relu): ReLU(
        inplace=True
        IN:  f32[1,8,8,2048, name='resnet50_1/Sequential_3/1/add:0'],
        OUT: f32[1,8,8,2048, name='resnet50_1/Sequential_3/1/relu_2/Relu:0']
      )
    )
    (2): Bottleneck(
      IN:  f32[1,8,8,2048, name='resnet50_1/Sequential_3/1/relu_2/Relu:0'],
      OUT: f32[1,8,8,2048, name='resnet50_1/Sequential_3/2/relu_2/Relu:0']
      (conv1): Conv2d(
        2048, 512, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,8,8,2048, name='resnet50_1/Sequential_3/1/relu_2/Relu:0'],
        OUT: f32[1,8,8,512, name='resnet50_1/Sequential_3/2/conv1/Conv2D:0']
      )
      (bn1): BatchNorm2d(
        512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,8,8,512, name='resnet50_1/Sequential_3/2/conv1/Conv2D:0'],
        OUT: f32[1,8,8,512, name='resnet50_1/Sequential_3/2/bn1/batchnorm/add_1:0']
      )
      (conv2): Conv2d(
        512, 512, kernel_size=(3, 3), stride=(1, 1), padding=SAME, bias=False
        IN:  f32[1,8,8,512, name='resnet50_1/Sequential_3/2/relu/Relu:0'],
        OUT: f32[1,8,8,512, name='resnet50_1/Sequential_3/2/conv2/Conv2D:0']
      )
      (bn2): BatchNorm2d(
        512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,8,8,512, name='resnet50_1/Sequential_3/2/conv2/Conv2D:0'],
        OUT: f32[1,8,8,512, name='resnet50_1/Sequential_3/2/bn2/batchnorm/add_1:0']
      )
      (conv3): Conv2d(
        512, 2048, kernel_size=(1, 1), stride=(1, 1), padding=VALID, bias=False
        IN:  f32[1,8,8,512, name='resnet50_1/Sequential_3/2/relu_1/Relu:0'],
        OUT: f32[1,8,8,2048, name='resnet50_1/Sequential_3/2/conv3/Conv2D:0']
      )
      (bn3): BatchNorm2d(
        2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True
        IN:  f32[1,8,8,2048, name='resnet50_1/Sequential_3/2/conv3/Conv2D:0'],
        OUT: f32[1,8,8,2048, name='resnet50_1/Sequential_3/2/bn3/batchnorm/add_1:0']
      )
      (relu): ReLU(
        inplace=True
        IN:  f32[1,8,8,2048, name='resnet50_1/Sequential_3/2/add:0'],
        OUT: f32[1,8,8,2048, name='resnet50_1/Sequential_3/2/relu_2/Relu:0']
      )
    )
  )
  (avgpool): AdaptiveAvgPool2d(
    output_size=(1, 1) data_format=NHWC
    IN:  f32[1,8,8,2048, name='resnet50_1/Sequential_3/2/relu_2/Relu:0'],
    OUT: f32[1,1,1,2048, name='resnet50_1/avgpool/avgpool/Mean:0']
  )
  (fc): Linear(
    in_features=2048, out_features=1000, bias=True
    IN:  f32[1,2048, name='resnet50_1/Reshape:0'],
    OUT: f32[1,1000, name='resnet50_1/fc/BiasAdd:0']
  )
)
